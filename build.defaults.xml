<?xml version="1.0" encoding="UTF-8"?>
<project name="Bright Solutions - Default Phing Tasks" default="Default:install" phingVersion="2.4.11">

    <import file="vendor/brightsolutions/phing-tasks/build.common.xml"/>
    <import file="vendor/brightsolutions/phing-tasks/build.test.xml"/>
    <import file="vendor/brightsolutions/phing-tasks/build.callbacks.xml"/>

    <!-- ### Install Drupal and import configurations. Also contains the initial Drupal project setup. -->
    <target name="Default:install"
            depends="composer:install,
            setup-phing-drush,
            settings-init"
            description="Install Drupal and import configurations. Also contains the initial Drupal project setup."
            unless="project.installed">
        <tstamp />

        <exec command='if [ ! "$(ls -A config)" ]; then echo "false"; else echo "true"; fi' outputProperty='output.CONFIG_EXISTS' />
        <if>
            <equals arg1="${output.CONFIG_EXISTS}" arg2="true" />
            <then>
                <!-- If the config folder does already exist: -->

                <!-- Check if the developer really wants to reinstall the site -->
                <input message="Do you really want to rebuild the whole site? *WARNING* The database will be dropped, make sure all configuration is exported." propertyName="rebuild-confirmation" validArgs="yes,no" defaultValue="no"/>
                <if>
                    <isfalse value="${rebuild-confirmation}"/>
                    <then>
                        <fail message="Build aborted!" />
                    </then>
                </if>

                <!-- Install Drupal and import existing configuration. -->
                <phingcall target="drupal:site-install-config-import"/>
            </then>
            <else>
                <!-- If the config folder does NOT exist: -->

                <!-- Initial Drupal installation -->
                <phingcall target="drupal:site-install"/>

                <!-- Enable always required modules / themes -->
                <phingcall target="drupal:enable-module">
                    <property name="module" value="admin_toolbar,
                    admin_toolbar_tools,
                    backup_migrate,
                    coffee,
                    linkit,
                    token,
                    metatag,
                    simple_sitemap,
                    ultimate_cron,
                    responsive_preview,
                    seven" />
                </phingcall>

                <!-- Set Seven as the admin theme and remove unnecessary blocks. -->
                <phingcall target="drupal:set-config-value">
                    <property name="config-name" value="system.theme" />
                    <property name="key" value="admin" />
                    <property name="value" value="seven" />
                </phingcall>
                <phingcall target="drupal:set-config-value">
                    <property name="config-name" value="node.settings" />
                    <property name="key" value="use_admin_theme" />
                    <property name="value" value="true" />
                </phingcall>
                <phingcall target="drupal:delete-config">
                    <property name="config-name" value="block.block.seven_login" />
                </phingcall>
                <phingcall target="drupal:delete-config">
                    <property name="config-name" value="block.block.seven_branding" />
                </phingcall>
                <phingcall target="drupal:delete-config">
                    <property name="config-name" value="block.block.seven_tools" />
                </phingcall>
                <phingcall target="drupal:delete-config">
                    <property name="config-name" value="block.block.seven_admin" />
                </phingcall>

                <!-- Create a theme -->
                <input message="Do you want to create a custom theme?" propertyName="create-custom-theme" validArgs="yes,no" defaultValue="yes"/>
                <if>
                    <istrue value="${create-custom-theme}"/>
                    <then>
                        <input message="Enter the machine name for the theme." propertyName="theme_name"/>
                        <!-- Setup Theme -->
                        <phingcall target="drupal:setup-theme">
                            <property name="theme_name" value="${theme_name}" />
                        </phingcall>

                        <!-- Enable Theme -->
                        <phingcall target="drupal:enable-module">
                            <property name="module" value="${theme_name}" />
                        </phingcall>

                        <!-- Set as default -->
                        <phingcall target="drupal:set-config-value">
                            <property name="config-name" value="system.theme" />
                            <property name="key" value="default" />
                            <property name="value" value="${theme_name}" />
                        </phingcall>

                        <!-- Remove default blocks -->
                        <phingcall target="drupal:delete-config">
                            <property name="config-name" value="block.block.${theme_name}_login" />
                        </phingcall>
                        <phingcall target="drupal:delete-config">
                            <property name="config-name" value="block.block.${theme_name}_branding" />
                        </phingcall>
                        <phingcall target="drupal:delete-config">
                            <property name="config-name" value="block.block.${theme_name}_tools" />
                        </phingcall>
                        <phingcall target="drupal:delete-config">
                            <property name="config-name" value="block.block.${theme_name}_admin" />
                        </phingcall>

                        <!-- Uninstall the "stark" theme. -->
                        <phingcall target="drupal:uninstall-module">
                            <property name="module" value="stark" />
                        </phingcall>
                    </then>
                </if>

                <!-- Initial config export -->
                <phingcall target="drupal:config-export"/>
            </else>
        </if>

        <!-- Setup permissions -->
        <phingcall target="setup-dirs-permissions"/>

        <!-- Set property to prevent target from being executed multiple times -->
        <property name="project.installed" value="true"/>

        <!-- Import translation file on site install -->
        <!-- Include the below call if you have to work with translations within this project. -->
        <!-- <phingcall target="drupal:config:import-translations"/> -->

        <!-- Open the site after installation. -->
        <drush command="uli" />
    </target>

    <target name="Default:update" depends="setup-phing-drush"
            description="Composer install, update datebase, update entites, config import, translation import.">

        <phingcall target="composer:install"/>
        <drush command="updb" assume="yes" />
        <drush command="entity-updates" assume="yes" />
        <drush command="config-import" assume="yes">
            <param>staging</param>
        </drush>

        <!-- Include the below call if you have to work with translations within this project. -->
        <!-- <phingcall target="drupal:config:import-translations"/> -->
        <drush command="cache-rebuild"/>
    </target>

    <!-- Export the active configuration and translations -->
    <target name="Default:export" depends="setup-phing-drush" description="Export the active configuration and translations.">
        <phingcall target="drupal:config-export"/>
        <!-- Include the below call if you have to work with translations within this project. -->
        <!-- <phingcall target="drupal:config:export-translations"/> -->
    </target>

    <!-- PHP Code Test -->
    <target name="Default:php-code-test" description="Tests the projects custom php code.">
        <input propertyName="test_scope"
               validargs="custom_module,specific_files,all_custom_files"
               defaultvalue="all_custom_files"
               message="What do you want to test?">
        </input>

        <if>
            <equals arg1="${test_scope}" arg2="specific_files" />
            <then>
                <input propertyName="files"
                       message="Enter a comma separated list of files you want to test. The path must be relative to the projects root.">
                </input>
            </then>
            <elseif>
                <equals arg1="${test_scope}" arg2="custom_module" />
                <then>
                    <echo>${project.basedir}</echo>
                    <input propertyName="module_machine_name"
                           message="Enter the machine name of the custom module you want to test. The module must be in the folder /modules/custom.">
                    </input>
                    <property name="files"  value="${project.basedir}/docroot/modules/custom/${module_machine_name}" />
                </then>
            </elseif>
            <elseif>
                <equals arg1="${test_scope}" arg2="all_custom_files" />
                <then>
                    <!-- Do nothing. -->
                </then>
            </elseif>
        </if>
        <phingcall target="code-sniffer-local">
            <property name="test_scope" value="${files}" />
        </phingcall>
    </target>

    <!-- PHP Code Fix -->
    <target name="Default:php-code-fix" description="Will automatically fix code style issues based on the Drupal coding standards.">
        <phingcall target="code-beautifier-and-fixer"/>
    </target>
</project>
